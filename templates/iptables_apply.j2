# {{ ansible_managed }}
{###############################################################################
  This template only applies to the filter table
#}
*filter

{#-
  There are only 4 userland states: NEW, ESTABLISHED, RELATED and INVALID. That
  means that any packet that was not caught by the two first rules is NEW, so
  it's useless to specify this criterion in the next rules.
#}
{%- set core_rules = [
    'INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT',
    'INPUT -m conntrack --ctstate INVALID -j DROP',
    'INPUT -i lo -m comment --comment loopback -j ACCEPT',
    'INPUT -p icmp -m comment --comment ICMP -j ACCEPT',
    'INPUT -p udp -m udp --sport 0:1023 -m comment --comment "bad source port" -j DROP',
    'INPUT -p tcp -m tcp --sport 0:1023 -m comment --comment "bad source port" -j DROP',
    'INPUT -p tcp -m tcp ! --tcp-flags FIN,SYN,RST,ACK SYN -m comment --comment "bad NEWs" -j DROP',
    'INPUT -p tcp -m tcp --dport %s -m comment --comment SSH -j ACCEPT' % (ansible_port | d(22)),
    'OUTPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT',
    'OUTPUT -m conntrack --ctstate INVALID -j DROP'
    ] %}

{%- if iptables_apply__template_noflush | d(False) | bool %}
{% set core_rules = core_rules | reverse | map('regex_replace', '^', '-I ') | list %}
{%- else %}
{% set core_rules = core_rules | map('regex_replace', '^', '-A ') | list %}
{%- endif %}

{###############################################################################
  Keep currently applied policies, unless policies are specified. The role
  provides a default value that is:

  iptables_apply__template_policy:
    input: DROP
    forward: DROP
    output: ACCEPT

  To reset it (i.e. to not change policies on the target host):
  iptables_apply__template_policy: {}
#}
{% if iptables_apply__template_policy.input is defined %}
:INPUT {{ iptables_apply__template_policy.input }} [0:0]
{% endif -%}
{% if iptables_apply__template_policy.forward is defined %}
:FORWARD {{ iptables_apply__template_policy.forward }} [0:0]
{% endif -%}
{% if iptables_apply__template_policy.output is defined %}
:OUTPUT {{ iptables_apply__template_policy.output }} [0:0]
{% endif -%}

{###############################################################################
  The core rules, a.k.a. sanity rules.  They are inserted (-I) instead of being
  appended (-A), to ensure the --noflush option will prepend our rules to the
  current ones. They could be either numbered or inserted in the reverse order,
  but numbered rules don't work as expected with the --noflush option in nft
  implementation (iptables-nft-restore, via alternatives).
#}
{%- if iptables_apply__template_core|bool %}
{% for core_rule in core_rules %}
{{ core_rule }}
{% endfor %}
{% endif -%}

{###############################################################################
  Application-specific rules, generally to **ACCEPT** given port(s) on filter's
  **INPUT** chain and **tcp** protocol.
#}
{% for rule in iptables_apply__template_rules %}
-A {{
    rule.chain | d('INPUT') }} -p {{
    rule.protocol | d('tcp') }} -m {{ 'multiport --dports' if ',' in
    rule.dport | string else '%s --dport' %
    rule.protocol | d('tcp') }} {{
    rule.dport }} -m comment --comment {{
    rule.name | regex_replace('^|$', '\"') if
    rule.name | replace('-','_') | wordcount != 1 else
    rule.name }} -j {{
    rule.jump | d('ACCEPT') }}
{% endfor -%}

{###############################################################################
  The last line for a given table
#}
COMMIT
# Completed
