# Play the role as many times as needed to test every action and at least one
# ruleset that leads to roll back to the last one.  This playbook should never
# end up in `failed` nor `unreachable` states.  Triggered (expected) rollbacks
# are handled in block/rescue tasks.
#
# Examples:
#
# ansible-playbook playbook.yml
# ansible-playbook playbook.yml --tags append,insert
# ansible-playbook playbook.yml --tags idempotency
# ansible-playbook playbook.yml --tags rollback
# ansible-playbook playbook.yml --skip-tags init -e upper_timeout=30
---
################################################################################
- name: "00. PREPARE THE FIELD"                                             #{{{1
  hosts: tests
  become: yes
  tags: always

  tasks:
    - name: "install python alternatives"
      alternatives:
        name: python
        path: "/usr/bin/python{{ item.version }}"
        link: /usr/bin/python
        priority: "{{ item.priority }}"
      loop:
        - version: 3
          priority: 30
      when:
        - ansible_os_family|lower in ["debian"]
        - ansible_distribution_version in ["testing", "bullseye"]

    - name: "install package"
      apt:
        name: iptables-persistent
        state: present
      register: install
      retries: 3
      delay: 5
      until: install is succeeded
      when:
        - ansible_os_family|lower in ["debian"]

    - name: "switch to iptables-legacy alternative"
      alternatives:
        name: iptables
        path: /usr/sbin/iptables-legacy
      when:
        - ansible_os_family|lower in ["debian"]
        - iptables_apply__alternative | d('nft') == 'legacy'

    - name: "switch to iptables-nft alternative"
      alternatives:
        name: iptables
        path: /usr/sbin/iptables-nft
      when:
        - ansible_os_family|lower in ["debian"]
        - iptables_apply__alternative | d('nft') != 'legacy'

    - name: "install package"
      yum:
        name: iptables-services
        state: present
      register: install
      retries: 3
      delay: 5
      until: install is succeeded
      when:
        - ansible_os_family|lower in ["redhat"]

    - name: "disable firewalld"
      systemd:
        name: firewalld
        state: stopped
        enabled: no
      when:
        - ansible_os_family|lower in ["redhat"]

    - name: "preset rules to append, insert, delete or template, and other stuff"
      set_fact:
        rules_web:
          - name: "Web HTTP/HTTPS"
            dport: "80,443"
        rules_ssh:
          - name: "SSH"
            dport: "{{ ansible_port|default(22) }}"
        to_insert:
          - name: "4 TESTS"
            dport: "20:23"
        iptables_apply__template_rules:
          - name: "monitoring"
            dport: "161,5666"
          - name: "monitoring"
            dport: "161"
            protocol: "udp"
        iptables_apply__path_buffer: "/run/iptables.apply"
        # Will be incrementend for each played test
        number: 1
        total: 22


################################################################################
- name: "01. TEST INITIALIZATION FROM NULL STATE WITH NO TABLE"             #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - template
    - flush
    - init

  tasks:
    - import_role:
        name: iptables_apply
        tasks_from: iptables-service.yml
      vars:
        iptables_apply__service_enabled: no
        iptables_apply__service_started: no

    - name: "reboot"
      reboot:

    - name: "check iptables-save output is empty"
      command: iptables-save
      register: command
      changed_when: false
      failed_when: command.stdout_lines | length > 0

    - name: "initialize firewall from NULL state"
      iptables_state:
        path: "{{ iptables_apply__path_buffer }}"
        state: saved

    - name: "check iptables-save output is not empty"
      command: iptables-save
      register: command
      changed_when: false
      failed_when: command.stdout_lines | length == 0

    - name: "check buffer content (table)"
      lineinfile:
        path: "{{ iptables_apply__path_buffer }}"
        line: "*filter"
      register: lineinfile
      failed_when: lineinfile is changed

    - name: "check buffer content (policies)"
      replace:
        path: "{{ iptables_apply__path_buffer }}"
        regexp: '^(:(IN|OUT)PUT ACCEPT) \[[0-9]+:[0-9]+\]$'
        replace: '\1'
      register: replace
      failed_when: replace is not changed
      check_mode: yes

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/01): INITIALIZATION FROM NULL STATE WITH NO TABLE"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
- name: "02. TEST INITIALIZATION FROM NULL STATE WITH TABLE FILTER"         #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - append
    - insert
    - delete
    - init

  tasks:
    - import_role:
        name: iptables_apply
        tasks_from: iptables-service.yml
      vars:
        iptables_apply__service_enabled: no
        iptables_apply__service_started: no

    - name: "reboot"
      reboot:

    - name: "check iptables-save output is empty"
      command: iptables-save
      register: command
      changed_when: false
      failed_when: command.stdout_lines | length > 0

    - name: "initialize firewall from NULL state"
      iptables_state:
        path: "{{ iptables_apply__path_buffer }}"
        state: saved
        table: filter

    - name: "check iptables-save output is not empty"
      command: iptables-save
      register: command
      changed_when: false
      failed_when: command.stdout_lines | length == 0

    - name: "check buffer content (table)"
      lineinfile:
        path: "{{ iptables_apply__path_buffer }}"
        line: "*filter"
      register: lineinfile
      failed_when: lineinfile is changed

    - name: "check buffer content (INPUT policy)"
      lineinfile:
        path: "{{ iptables_apply__path_buffer }}"
        regexp: '^:INPUT ACCEPT .*'
        state: absent
      register: lineinfile
      failed_when: lineinfile is not changed
      check_mode: yes

    - name: "check buffer content (OUTPUT policy)"
      lineinfile:
        path: "{{ iptables_apply__path_buffer }}"
        regexp: '^:OUTPUT ACCEPT .*'
        state: absent
      register: lineinfile
      failed_when: lineinfile is not changed
      check_mode: yes

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/02): INITIALIZATION FROM NULL STATE WITH TABLE FILTER"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
- name: "03. TEST ACTION 'TEMPLATE'"                                        #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - template
    - action

  pre_tasks:
    - name: "remove a rule coming from templated ruleset"
      iptables:
        chain: INPUT
        protocol: tcp
        match: tcp
        syn: negate
        comment: "bad NEWs"
        jump: DROP
        state: absent

  roles:
    - role: iptables_apply

  tasks:
    - name: "validate templated policy"
      # Policy DROP in chain INPUT should be enough to state that a firewall is
      # in place.
      iptables:
        chain: INPUT
        policy: DROP
      register: iptables
      failed_when: iptables is changed

    - name: "validate templated ruleset"
      iptables:
        chain: INPUT
        protocol: tcp
        match: tcp
        syn: negate
        comment: "bad NEWs"
        jump: DROP
      register: iptables
      failed_when: iptables is changed

    - name: "validate 'template' action"
      systemd:
        name: "{{ iptables_apply__service }}"
        enabled: true
        state: started
      register: service_status
      failed_when: service_status is changed

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/03): ACTION 'TEMPLATE'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
# Ensure the parameter that forces to reapply the template is working.
- name: "04. TEST OVERWRITE OF ACTION 'TEMPLATE'"                           #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - template
    - overwrite

  pre_tasks:
    - name: "add a rule not provided by template"
      iptables:
        chain: "{{ rule.chain | default('INPUT') }}"
        protocol: "{{ rule.protocol | default('tcp') }}"
        match: "{{ 'multiport' if ',' in rule.dport|string else omit }}"
        destination_port: "{{ rule.dport }}"
        comment: "{{ rule.name }}"
        jump: "{{ rule.jump | default('ACCEPT') }}"
        state: present
      loop: "{{ rules_web }}"
      loop_control:
        loop_var: rule

  roles:
    - role: iptables_apply
      iptables_apply__template_once: no

  tasks:
    - name: "check the rule not provided by template is not here"
      iptables:
        chain: "{{ rule.chain | default('INPUT') }}"
        protocol: "{{ rule.protocol | default('tcp') }}"
        match: "{{ 'multiport' if ',' in rule.dport|string else omit }}"
        destination_port: "{{ rule.dport }}"
        comment: "{{ rule.name }}"
        jump: "{{ rule.jump | default('ACCEPT') }}"
        state: absent
      loop: "{{ rules_web }}"
      loop_control:
        loop_var: rule
      register: iptables
      failed_when: iptables is changed

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/04): OVERWRITE OF ACTION 'TEMPLATE'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
- name: "05. TEST INDEMPOTENCY OF ACTION 'TEMPLATE'"                        #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - template
    - idempotency

  roles:
    - role: iptables_apply
      iptables_apply__template_once: no

  tasks:
    - name: "blank variables"
      set_fact:
        iptables_state__registered: ""
        iptables_apply__restored: ""
        iptables_apply__ruleset: ""

    - import_role:
        name: iptables_apply

    - name: "check for idempotency of all tasks"
      assert:
        that:
          - iptables_state__registered is not changed
          - iptables_apply__restored is not changed
          - iptables_apply__ruleset is not changed
        quiet: yes

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/05): IDEMPOTENCY OF ACTION 'TEMPLATE'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
# Ensure the most expected feature is working fine.
- name: "06. TEST ROLLBACK FOR ACTION 'TEMPLATE'"                           #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - template
    - rollback

  tasks:
    - name: "test rollback after bad 'template'"
      block:
        - import_role:
            name: iptables_apply
          vars:
            iptables_apply__template_once: no
            iptables_apply__template_core: no
      rescue:
        - name: "check expected error"
          assert:
            that:
              - iptables_apply__ruleset is changed
              - iptables_apply__restored.applied is defined
              - not iptables_apply__restored.applied
            quiet: yes
          register: rollback_template

    - name: "fail if role succeeded"
      fail:
        msg: "There is some unexpected issue in rollback feature"
      failed_when: rollback_template is undefined

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/06): ROLLBACK FOR ACTION 'TEMPLATE'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
- name: "07. TEST ACTION 'FLUSH'"                                           #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - flush
    - action

  roles:
    - role: iptables_apply
      iptables_apply__action: flush

  tasks:
    - name: "validate flushed ruleset"
      shell: iptables-save -t filter | grep -Ee '^(-A|:.* DROP)'
      register: grep
      changed_when: false
      failed_when: grep.rc == 0

    - name: "validate 'flush' action"
      systemd:
        name: "{{ iptables_apply__service }}"
        enabled: false
        state: stopped
      register: service_status
      failed_when: service_status is changed

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/07): ACTION 'FLUSH'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
- name: "08. TEST ACTION 'APPEND'"                                          #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - append
    - action

  pre_tasks:
    - name: "check the rule to append is not there"
      iptables:
        chain: "{{ rule.chain | default('INPUT') }}"
        protocol: "{{ rule.protocol | default('tcp') }}"
        match: "{{ 'multiport' if ',' in rule.dport|string else omit }}"
        destination_port: "{{ rule.dport }}"
        comment: "{{ rule.name }}"
        jump: "{{ rule.jump | default('ACCEPT') }}"
        state: absent
      loop: "{{ rules_web }}"
      loop_control:
        loop_var: rule

  roles:
    - role: iptables_apply
      iptables_apply__action: append
      iptables_apply__rules: "{{ rules_web }}"

  tasks:
    - name: "check the appended rule is there"
      iptables:
        chain: "{{ rule.chain | default('INPUT') }}"
        protocol: "{{ rule.protocol | default('tcp') }}"
        match: "{{ 'multiport' if ',' in rule.dport|string else omit }}"
        destination_port: "{{ rule.dport }}"
        comment: "{{ rule.name }}"
        jump: "{{ rule.jump | default('ACCEPT') }}"
        state: present
      register: iptables
      failed_when: iptables is changed
      loop: "{{ rules_web }}"
      loop_control:
        loop_var: rule

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/08): ACTION 'APPEND'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
# Single rule management actions MUST be globally idempotent: some tasks are
# always marked as changed, but the role doesn't attempt to apply the buffered
# ruleset if it didn't changed.  This sequence also ensures that actions adding
# rules (`append`, `insert`) are idempotent between them too.
- name: "09. TEST INDEMPOTENCY OF ACTION 'APPEND'"                          #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - append
    - idempotency

  pre_tasks:
    - name: "blank variables"
      set_fact:
        iptables_apply__restored: ""
        iptables_apply__ruleset: ""

    - name: "check the rule to append is there"
      iptables:
        chain: "{{ rule.chain | default('INPUT') }}"
        protocol: "{{ rule.protocol | default('tcp') }}"
        match: "{{ 'multiport' if ',' in rule.dport|string else omit }}"
        destination_port: "{{ rule.dport }}"
        comment: "{{ rule.name }}"
        jump: "{{ rule.jump | default('ACCEPT') }}"
        state: present
      loop: "{{ rules_web }}"
      loop_control:
        loop_var: rule

  roles:
    - role: iptables_apply
      iptables_apply__action: append
      iptables_apply__rules: "{{ rules_web }}"

  tasks:
    - name: "check for idempotency of all tasks"
      assert:
        that:
          - iptables_apply__restored is not changed
          - iptables_apply__ruleset is not changed
        quiet: yes

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/09): IDEMPOTENCY OF ACTION 'APPEND'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
# Ensure the rollback feature works for every action.  Note that at this step,
# there is no ssh-specific passing rule but a rule for ports 20:23.  The table
# needs to be flushed before testing action 'append'.
- name: "10. TEST ROLLBACK FOR ACTION 'APPEND'"                             #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - append
    - rollback
    - reject
    - ssh

  roles:
    - role: iptables_apply
      iptables_apply__action: flush

  tasks:
    - name: "test rollback after bad 'append'"
      block:
        - import_role:
            name: iptables_apply
          vars:
            iptables_apply__action: append
            iptables_apply__rules:
              - "{{ rules_ssh[0] | combine({'jump':'REJECT'}) }}"
      rescue:
        - name: "check expected error"
          assert:
            that:
              - iptables_apply__ruleset is changed
              - iptables_apply__restored.applied is defined
              - not iptables_apply__restored.applied
            quiet: yes
          register: rollback_append

    - name: "fail if role succeeded"
      fail:
        msg: "There is some unexpected issue in rollback feature"
      failed_when: rollback_append is undefined

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/10): ROLLBACK FOR ACTION 'APPEND'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
# Ensure single rule management actions are working as expected.  We dont check
# service status here, but only the fact that a rule has been added or removed.
# This sequence is a junglery that removes ssh-specific passing rule with no
# error because another one does the job.
- name: "11. TEST ACTION 'INSERT'"                                          #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - insert
    - action

  pre_tasks:
    - import_role:
        name: iptables_apply

    - name: "check the rule to insert is not there"
      iptables:
        chain: "{{ rule.chain | default('INPUT') }}"
        protocol: "{{ rule.protocol | default('tcp') }}"
        match: "{{ 'multiport' if ',' in rule.dport|string else omit }}"
        destination_port: "{{ rule.dport }}"
        comment: "{{ rule.name }}"
        jump: "{{ rule.jump | default('ACCEPT') }}"
        state: absent
      loop: "{{ to_insert }}"
      loop_control:
        loop_var: rule

  roles:
    - role: iptables_apply
      iptables_apply__action: insert
      iptables_apply__rules: "{{ to_insert }}"

  tasks:
    - name: "check the inserted rule is there"
      iptables:
        chain: "{{ rule.chain | default('INPUT') }}"
        protocol: "{{ rule.protocol | default('tcp') }}"
        match: "{{ 'multiport' if ',' in rule.dport|string else omit }}"
        destination_port: "{{ rule.dport }}"
        comment: "{{ rule.name }}"
        jump: "{{ rule.jump | default('ACCEPT') }}"
        state: present
      register: iptables
      failed_when: iptables is changed
      loop: "{{ to_insert }}"
      loop_control:
        loop_var: rule

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/11): ACTION 'INSERT'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
# Single rule management actions MUST be globally idempotent: some tasks are
# always marked as changed, but the role doesn't attempt to apply the buffered
# ruleset if it didn't changed.  This sequence also ensures that actions adding
# rules (`append`, `insert`) are idempotent between them too.
- name: "12. TEST INDEMPOTENCY OF ACTION 'INSERT'"                          #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - insert
    - idempotency

  pre_tasks:
    - name: "blank variables"
      set_fact:
        iptables_apply__restored: ""
        iptables_apply__ruleset: ""

    - name: "check the rule to insert is there"
      iptables:
        chain: "{{ rule.chain | default('INPUT') }}"
        protocol: "{{ rule.protocol | default('tcp') }}"
        match: "{{ 'multiport' if ',' in rule.dport|string else omit }}"
        destination_port: "{{ rule.dport }}"
        comment: "{{ rule.name }}"
        jump: "{{ rule.jump | default('ACCEPT') }}"
        state: present
      loop: "{{ to_insert }}"
      loop_control:
        loop_var: rule

  roles:
    - role: iptables_apply
      iptables_apply__action: insert
      iptables_apply__rules: "{{ to_insert }}"

  tasks:
    - name: "check for idempotency of all tasks"
      assert:
        that:
          - iptables_apply__restored is not changed
          - iptables_apply__ruleset is not changed
        quiet: yes

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/12): IDEMPOTENCY OF ACTION 'INSERT'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
# Ensure the rollback feature works for every action.  Note that at this step,
# there is no ssh-specific passing rule but a rule for ports 20:23.  The table
# needs to be flushed before testing action 'append'.
- name: "13. TEST ROLLBACK FOR ACTION 'INSERT'"                             #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - insert
    - rollback
    - reject
    - ssh

  tasks:
    - name: "test rollback after bad 'insert'"
      block:
        - import_role:
            name: iptables_apply
          vars:
            iptables_apply__action: insert
            iptables_apply__rules:
              - "{{ rules_ssh[0] | combine({'jump':'REJECT'}) }}"
      rescue:
        - name: "check expected error"
          assert:
            that:
              - iptables_apply__ruleset is changed
              - iptables_apply__restored.applied is defined
              - not iptables_apply__restored.applied
            quiet: yes
          register: rollback_insert

    - name: "fail if role succeeded"
      fail:
        msg: "There is some unexpected issue in rollback feature"
      failed_when: rollback_insert is undefined

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/13): ROLLBACK FOR ACTION 'INSERT'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
# Ensure single rule management actions are working as expected.  We dont check
# service status here, but only the fact that a rule has been added or removed.
# This sequence is a junglery that removes ssh-specific passing rule with no
# error because another one does the job.
- name: "14. TEST ACTION 'DELETE'"                                          #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - delete
    - action

  pre_tasks:
    - import_role:
        name: iptables_apply
      vars:
        iptables_apply__template_once: no

    - name: "check the rule to delete is there"
      iptables:
        chain: "{{ rule.chain | default('INPUT') }}"
        protocol: "{{ rule.protocol | default('tcp') }}"
        match: "{{ 'multiport' if ',' in rule.dport|string else omit }}"
        destination_port: "{{ rule.dport }}"
        comment: "{{ rule.name }}"
        jump: "{{ rule.jump | default('ACCEPT') }}"
        state: present
      loop: "{{ to_insert }}"
      loop_control:
        loop_var: rule

  roles:
    - role: iptables_apply
      iptables_apply__action: delete
      iptables_apply__rules: "{{ to_insert }}"

  tasks:
    - name: "check the deleted rule is not there"
      iptables:
        chain: "{{ rule.chain | default('INPUT') }}"
        protocol: "{{ rule.protocol | default('tcp') }}"
        match: "{{ 'multiport' if ',' in rule.dport|string else omit }}"
        destination_port: "{{ rule.dport }}"
        comment: "{{ rule.name }}"
        jump: "{{ rule.jump | default('ACCEPT') }}"
        state: absent
      register: iptables
      failed_when: iptables is changed
      loop: "{{ to_insert }}"
      loop_control:
        loop_var: rule

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/14): ACTION 'DELETE'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
# Single rule management actions MUST be globally idempotent: some tasks are
# always marked as changed, but the role doesn't attempt to apply the buffered
# ruleset if it didn't changed.  This sequence also ensures that actions adding
# rules (`append`, `insert`) are idempotent between them too.
- name: "15. TEST INDEMPOTENCY OF ACTION 'DELETE'"                          #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - delete
    - idempotency

  pre_tasks:
    - name: "check the rule to delete is not there"
      iptables:
        chain: "{{ rule.chain | default('INPUT') }}"
        protocol: "{{ rule.protocol | default('tcp') }}"
        match: "{{ 'multiport' if ',' in rule.dport|string else omit }}"
        destination_port: "{{ rule.dport }}"
        comment: "{{ rule.name }}"
        jump: "{{ rule.jump | default('ACCEPT') }}"
        state: absent
      loop: "{{ to_insert }}"
      loop_control:
        loop_var: rule

  roles:
    - role: iptables_apply
      iptables_apply__action: delete
      iptables_apply__rules: "{{ to_insert }}"

  tasks:
    - name: "check for idempotency of all tasks"
      assert:
        that:
          - iptables_state__registered is not changed
          - iptables_apply__restored is not changed
          - iptables_apply__ruleset is not changed
        quiet: yes

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/15): IDEMPOTENCY OF ACTION 'DELETE'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
# Ensure the rollback feature works for every action.  Note that at this step,
# there is no ssh-specific passing rule but a rule for ports 20:23.  The table
# needs to be flushed before testing action 'append'.
- name: "16. TEST ROLLBACK FOR ACTION 'DELETE'"                             #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - delete
    - rollback
    - ssh

  roles:
    - role: iptables_apply
      iptables_apply__template_once: no

  tasks:
    - name: "test rollback after bad 'delete'"
      block:
        - import_role:
            name: iptables_apply
          vars:
            iptables_apply__action: delete
            iptables_apply__rules: "{{ rules_ssh }}"
      rescue:
        - name: "check expected error"
          assert:
            that:
              - iptables_apply__ruleset is changed
              - iptables_apply__restored.applied is defined
              - not iptables_apply__restored.applied
            quiet: yes
          register: rollback_delete

    - name: "fail if role succeeded"
      fail:
        msg: "There is some unexpected issue in rollback feature"
      failed_when: rollback_delete is undefined

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/16): ROLLBACK FOR ACTION 'DELETE'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
# Ensure the noflush option works, i.e. templated rules are applied and initial
# rules are still there.
- name: "17. TEST OPTION NOFLUSH OF ACTION 'TEMPLATE'"                      #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - template
    - noflush

  roles:
    - role: iptables_apply
      iptables_apply__action: flush
    - role: iptables_apply
      iptables_apply__action: append
      iptables_apply__rules: "{{ rules_web }}"
    - role: iptables_apply
      iptables_apply__template_noflush: yes

  tasks:
    - name: "check the appended rule is still there"
      iptables:
        chain: "{{ rule.chain | default('INPUT') }}"
        protocol: "{{ rule.protocol | default('tcp') }}"
        match: "{{ 'multiport' if ',' in rule.dport|string else omit }}"
        destination_port: "{{ rule.dport }}"
        comment: "{{ rule.name }}"
        jump: "{{ rule.jump | default('ACCEPT') }}"
        state: present
      register: iptables
      failed_when: iptables is changed
      loop: "{{ rules_web }}"
      loop_control:
        loop_var: rule

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/17): NOFLUSH OF ACTION 'TEMPLATE'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
- name: "18. TEST ROLLBACK WITH INPUT POLICY DROP"                          #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - rollback
    - policy
    - input

  tasks:
    - name: "test rollback after bad policy"
      block:
        - name: "remove iptables buffer"
          file:
            path: "{{ iptables_apply__path_buffer }}"
            state: absent

        - import_role:
            name: iptables_apply
          vars:
            iptables_apply__template_once: no
            iptables_apply__template_core: no
            iptables_apply__template_policy:
              input: DROP
              forward: ACCEPT
              output: ACCEPT
      rescue:
        - name: "check expected error"
          assert:
            that:
              - iptables_apply__ruleset is changed
              - iptables_apply__restored.applied is defined
              - not iptables_apply__restored.applied
            quiet: yes
          register: rollback_policy_drop_input

    - name: "fail if role succeeded"
      fail:
        msg: "There is some unexpected issue in rollback feature"
      failed_when: rollback_policy_drop_input is undefined

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/18): ROLLBACK WITH INPUT POLICY DROP"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
- name: "19. TEST ROLLBACK WITH OUTPUT POLICY DROP"                         #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - rollback
    - policy
    - output

  tasks:
    - name: "test rollback after bad policy"
      block:
        - name: "remove iptables buffer"
          file:
            path: "{{ iptables_apply__path_buffer }}"
            state: absent

        - import_role:
            name: iptables_apply
          vars:
            iptables_apply__template_once: no
            iptables_apply__template_core: no
            iptables_apply__template_policy:
              input: ACCEPT
              forward: ACCEPT
              output: DROP
      rescue:
        - name: "check expected error"
          assert:
            that:
              - iptables_apply__ruleset is changed
              - iptables_apply__restored.applied is defined
              - not iptables_apply__restored.applied
            quiet: yes
          register: rollback_policy_drop_output

    - name: "fail if role succeeded"
      fail:
        msg: "There is some unexpected issue in rollback feature"
      failed_when: rollback_policy_drop_output is undefined

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/19): ROLLBACK WITH OUTPUT POLICY DROP"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
- name: "20. TEST ROLLBACK WITH LOWER TIMEOUT"                              #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - rollback
    - timeout
    - lower

  vars:
    ansible_timeout: "{{ lower_timeout | default(5) }}"
    iptables_apply__rollback_timeout: "{{ ansible_timeout }}"

  tasks:
    - name: "test rollback timeout (lower limit = {{ iptables_apply__rollback_timeout }})"
      block:
        - name: "remove iptables buffer"
          file:
            path: "{{ iptables_apply__path_buffer }}"
            state: absent

        - import_role:
            name: iptables_apply
          vars:
            iptables_apply__template_once: no
            iptables_apply__template_core: no
      rescue:
        - name: "check expected error"
          assert:
            that:
              - iptables_apply__ruleset is changed
              - iptables_apply__restored.applied is defined
              - not iptables_apply__restored.applied
            quiet: yes
          register: rollback_timeout_lower

    - name: "fail if role succeeded"
      fail:
        msg: "There is some unexpected issue in rollback feature"
      failed_when: rollback_timeout_lower is undefined

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/20): ROLLBACK WITH LOWER TIMEOUT ({{ iptables_apply__rollback_timeout }}s)"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
- name: "21. TEST ROLLBACK WITH UPPER TIMEOUT"                              #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - rollback
    - timeout
    - upper

  vars:
    ansible_timeout: "{{ upper_timeout | default(300) }}"
    iptables_apply__rollback_timeout: "{{ ansible_timeout }}"

  tasks:
    - name: "test rollback timeout (upper limit = {{ iptables_apply__rollback_timeout }})"
      block:
        - name: "remove iptables buffer"
          file:
            path: "{{ iptables_apply__path_buffer }}"
            state: absent

        - import_role:
            name: iptables_apply
          vars:
            iptables_apply__template_once: no
            iptables_apply__template_core: no
      rescue:
        - name: "check expected error"
          assert:
            that:
              - iptables_apply__ruleset is changed
              - iptables_apply__restored.applied is defined
              - not iptables_apply__restored.applied
            quiet: yes
          register: rollback_timeout_upper

    - name: "fail if role succeeded"
      fail:
        msg: "There is some unexpected issue in rollback feature"
      failed_when: rollback_timeout_upper is undefined

    - name: "SUCCESSFULLY PASSED TEST {{ '%02d' % number|int }} (/21): ROLLBACK WITH UPPER TIMEOUT ({{ iptables_apply__rollback_timeout }}s)"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
# Ensure it is possible to update several rules by playing the role only once,
# even when neither the 'name' nor the 'dport' match between an old rule and a
# new rule.
- name: "22. TEST RULE UPDATE BY ACTION 'APPEND'"                           #{{{1
  hosts: tests
  gather_facts: no
  become: yes
  tags:
    - append
    - update

  vars:
    to_update:
      - name: "SNMP"
        dport: "161"
      - name: "SNMP"
        dport: "161"
        protocol: "udp"
    pivot_rule:
      - name: "{{ iptables_apply__template_rules[0].name }}"
        dport: "{{ to_update[0].dport }}"

  pre_tasks:
    - name: "check whether or not the rules to append/update/delete are there"
      iptables:
        chain: "{{ rule.chain | default('INPUT') }}"
        protocol: "{{ rule.protocol | default('tcp') }}"
        match: "{{ 'multiport' if ',' in rule.dport|string else omit }}"
        destination_port: "{{ rule.dport }}"
        comment: "{{ rule.name }}"
        jump: "{{ rule.jump | default('ACCEPT') }}"
        state: "{{ rule.state }}"
      loop:
        - "{{ iptables_apply__template_rules[0] | combine({'state':'present'}) }}"
        - "{{ iptables_apply__template_rules[1] | combine({'state':'present'}) }}"
        - "{{ to_update[0] | combine({'state':'absent'}) }}"
        - "{{ to_update[1] | combine({'state':'absent'}) }}"
      loop_control:
        loop_var: rule

  roles:
    - role: iptables_apply
      iptables_apply__action: append
      iptables_apply__rules: "{{ pivot_rule + to_update }}"

  tasks:
    - name: "check whether or not the rules to append/update/delete are there"
      iptables:
        chain: "{{ rule.chain | default('INPUT') }}"
        protocol: "{{ rule.protocol | default('tcp') }}"
        match: "{{ 'multiport' if ',' in rule.dport|string else omit }}"
        destination_port: "{{ rule.dport }}"
        comment: "{{ rule.name }}"
        jump: "{{ rule.jump | default('ACCEPT') }}"
        state: "{{ rule.state }}"
      register: iptables
      failed_when: iptables is changed
      loop:
        - "{{ iptables_apply__template_rules[0] | combine({'state':'absent'}) }}"
        - "{{ iptables_apply__template_rules[1] | combine({'state':'absent'}) }}"
        - "{{ to_update[0] | combine({'state':'present'}) }}"
        - "{{ to_update[1] | combine({'state':'present'}) }}"
      loop_control:
        loop_var: rule

    - name: "SUCCESSFULLY PASSED TEST  {{ '%02d' % number|int }} (/22): UPDATE BY ACTION 'APPEND'"
      set_fact:
        number: "{{ number|int + 1 }}"


################################################################################
- name: "CONGRATULATIONS"                                                   #{{{1
  hosts: tests
  gather_facts: no
  tags: always
  tasks:
    - name: "results overview"
      debug:
        msg:
          - "iptables_apply"
          - "--tags {{ ansible_run_tags | join(',') }}"
          - "--skip-tags {{ ansible_skip_tags | join(',') }}"
          - "{{ '%02d' % (total - (number|int - 1)) }} unplayed tests"
          - "successfully passed {{ '%02d' % (number|int - 1) }}/{{ total }} tests"
