---
# Check role requirements
- import_tasks: assertions.yml


# Do all the stuff using a template, or just delete/append/insert/update rules.
# Do not ever try to modify system state (iptables state) nor system files (in
# /etc) at this step.  All actions are performed against a temporary file, the
# 'buffer'.
- import_tasks: "rules-{{ iptables_apply__action }}.yml"


# `async="{{ ansible_timeout }}"` and `poll=0` are mandatory to enable rollback
# feature.
- name: "apply iptables ruleset and wait for confirmation"
  iptables_state:
    state: restored
    table: "{{ omit if iptables_apply__action in ['template','flush'] else 'filter' }}"
    noflush: "{{ iptables_apply__template_noflush if iptables_apply__action == 'template' else omit }}"
    path: "{{ iptables_apply__path_buffer }}"
  #throttle: 1
  async: "{{ ansible_timeout }}"
  poll: 0
  register: iptables_apply__restored


# Save current state of the firewall on the disk (file in /etc).
- name: "confirm current ruleset as persistent"
  iptables_state:
    state: saved
    path: "{{ iptables_apply__service_ruleset }}"
  #throttle: 1
  when:
    - iptables_apply__persist | bool


# And finally, ensure the service is started and enabled (or not).
# This task may be called apart with a 'tasks_from' too.
- import_tasks: iptables-service.yml
...
